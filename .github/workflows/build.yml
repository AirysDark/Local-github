name: Build Local-github (Pi via JSON presets)

on:
  workflow_dispatch:
    inputs:
      target_bits:
        type: choice
        description: "Build target + bitness"
        options:
          - "pi 64bit"
          - "pi 32bit"
        default: "pi 64bit"

      user_name:          { description: "Console username (or @users:index)", default: "@users:1" }
      user_password:      { description: "Console password (ignored if user token used)", default: "" }

      wifi_ssid:          { description: "Wi-Fi SSID (or @wifi:index)", default: "@wifi:1" }
      wifi_password:      { description: "Wi-Fi password (ignored if wifi token used)", default: "" }

      ssh_permit_root_login: { description: "yes | no | prohibit-password (or @ssh:index)", default: "@ssh:0" }
      ssh_password_auth:     { description: "yes | no (ignored if @ssh used)", default: "" }
      ssh_pubkey_auth:       { description: "yes | no (ignored if @ssh used)", default: "" }

      static_ip:          { description: "IPv4 (or @net:index)", default: "@net:0" }
      gateway:            { description: "Gateway IPv4", default: "" }
      dns:                { description: "DNS servers (semicolon-separated)", default: "" }

      wifi_country:       { description: "Wi-Fi country (ISO-3166 alpha-2 or @country:index)", default: "@country:0" }
      timezone:           { description: "Timezone (IANA tz or @tz:index)", default: "@tz:0" }

      keyboard:           { description: "Keyboard layout (XKB or @kbd:index or 'custom')", default: "@kbd:0" }
      keyboard_custom:    { description: "If keyboard=custom, provide value (e.g. us,intl)", default: "" }

jobs:
  build:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4

      - name: Load presets from JSON and resolve inputs
        id: cfg
        shell: bash
        run: |
          set -euo pipefail
          (jq --version >/dev/null 2>&1) || (sudo apt-get update && sudo apt-get install -y jq)
          OPTS_JSON="config/options.json"
          if [ ! -f "$OPTS_JSON" ]; then
            echo "Missing $OPTS_JSON" >&2; exit 1
          fi

          tok() { # $1 token like @users:1 ; $2 jq path
            local t="$1" p="$2"
            if [[ "$t" =~ ^@([a-z]+):([0-9]+)$ ]]; then
              local arr="${BASH_REMATCH[1]}"; local idx="${BASH_REMATCH[2]}"
              jq -r ".$arr[$idx] | $p" "$OPTS_JSON"
              return 0
            fi
            echo ""
            return 0
          }

          USER_IN='${{ github.event.inputs.user_name }}'
          USER_PASS_IN='${{ github.event.inputs.user_password }}'
          UNAME="$(tok "$USER_IN" '.name')"; UPASS="$(tok "$USER_IN" '.password')"
          [ -z "$UNAME" ] && UNAME="$USER_IN"
          [ -z "$UPASS" ] && UPASS="$USER_PASS_IN"

          WIFI_SSID_IN='${{ github.event.inputs.wifi_ssid }}'
          WIFI_PASS_IN='${{ github.event.inputs.wifi_password }}'
          WSSID="$(tok "$WIFI_SSID_IN" '.ssid')"; WPASS="$(tok "$WIFI_SSID_IN" '.password')"
          [ -z "$WSSID" ] && WSSID="$WIFI_SSID_IN"
          [ -z "$WPASS" ] && WPASS="$WIFI_PASS_IN"

          PRL_IN='${{ github.event.inputs.ssh_permit_root_login }}'
          PA_IN='${{ github.event.inputs.ssh_password_auth }}'
          PK_IN='${{ github.event.inputs.ssh_pubkey_auth }}'
          if [[ "$PRL_IN" =~ ^@ssh:[0-9]+$ ]]; then
            PRL="$(tok "$PRL_IN" '.permit_root_login')"
            PA="$(tok "$PRL_IN" '.password_auth')"
            PK="$(tok "$PRL_IN" '.pubkey_auth')"
          else
            PRL="$PRL_IN"; PA="$PA_IN"; PK="$PK_IN"
          fi
          case "$PRL" in true|yes|on) PRL="yes" ;; prohibit-password|prohibit_password|prohibit) PRL="prohibit-password" ;; false|no|off) PRL="no" ;; esac
          case "$PA"  in true|yes|on) PA="yes"  ;; false|no|off) PA="no" ;; esac
          case "$PK"  in true|yes|on) PK="yes"  ;; false|no|off) PK="no" ;; esac

          IP_IN='${{ github.event.inputs.static_ip }}'
          GW_IN='${{ github.event.inputs.gateway }}'
          DNS_IN='${{ github.event.inputs.dns }}'
          if [[ "$IP_IN" =~ ^@net:[0-9]+$ ]]; then
            IP="$(tok "$IP_IN" '.ip')"; GW="$(tok "$IP_IN" '.gateway')"; DNS="$(tok "$IP_IN" '.dns')"
          else
            IP="$IP_IN"; GW="$GW_IN"; DNS="$DNS_IN"
          fi

          COUNTRY_IN='${{ github.event.inputs.wifi_country }}'
          TZ_IN='${{ github.event.inputs.timezone }}'
          KBD_IN='${{ github.event.inputs.keyboard }}'
          KBD_CUSTOM='${{ github.event.inputs.keyboard_custom }}'
          if [[ "$COUNTRY_IN" =~ ^@country:[0-9]+$ ]]; then COUNTRY="$(tok "$COUNTRY_IN" '.')"; else COUNTRY="$COUNTRY_IN"; fi
          if [[ "$TZ_IN"      =~ ^@tz:[0-9]+$ ]]; then TZVAL="$(tok "$TZ_IN" '.')"; else TZVAL="$TZ_IN"; fi
          if [[ "$KBD_IN"     =~ ^@kbd:[0-9]+$ ]]; then KBD="$(tok "$KBD_IN" '.')"; else KBD="$KBD_IN"; fi
          if [ "$KBD" = "custom" ] && [ -n "$KBD_CUSTOM" ]; then KBD="$KBD_CUSTOM"; fi

          SEL='${{ github.event.inputs.target_bits }}'
          TARGET="${SEL% *}"; BIT="${SEL##* }"
          PI="arm64"; [ "$BIT" = "32bit" ] && PI="armhf"

          {
            echo "target=$TARGET"
            echo "bit_type=$BIT"
            echo "pi=$PI"
            echo "username=$UNAME"
            echo "userpass=$UPASS"
            echo "wifi_ssid=$WSSID"
            echo "wifi_password=$WPASS"
            echo "permit_root_login=$PRL"
            echo "password_auth=$PA"
            echo "pubkey_auth=$PK"
            echo "static_ip=$IP"
            echo "gateway=$GW"
            echo "dns=$DNS"
            echo "wifi_country=$COUNTRY"
            echo "timezone=$TZVAL"
            echo "keyboard=$KBD"
          } >> "$GITHUB_OUTPUT"

      - name: Prepare overlays (Pi)
        if: ${{ steps.cfg.outputs.target == 'pi' }}
        shell: bash
        env:
          WIFI_COUNTRY:       ${{ steps.cfg.outputs.wifi_country }}
          TIMEZONE:           ${{ steps.cfg.outputs.timezone }}
          KEYBOARD:           ${{ steps.cfg.outputs.keyboard }}
          STATIC_IP:          ${{ steps.cfg.outputs.static_ip }}
          GATEWAY:            ${{ steps.cfg.outputs.gateway }}
          DNS:                ${{ steps.cfg.outputs.dns }}
          PERMIT_ROOT_LOGIN:  ${{ steps.cfg.outputs.permit_root_login }}
          PASSWORD_AUTH:      ${{ steps.cfg.outputs.password_auth }}
          PUBKEY_AUTH:        ${{ steps.cfg.outputs.pubkey_auth }}
          USERNAME:           ${{ steps.cfg.outputs.username }}
          USERPASS:           ${{ steps.cfg.outputs.userpass }}
          WIFI_SSID:          ${{ steps.cfg.outputs.wifi_ssid }}
          WIFI_PASSWORD:      ${{ steps.cfg.outputs.wifi_password }}
        run: |
          set -e
          BASE="pi-gen/stage4/05-local-github"
          mkdir -p "$BASE/files/etc/ssh/sshd_config.d" "$BASE/files/etc/wpa_supplicant" "$BASE/files/etc/default" "$BASE/files/etc" "$BASE/files/etc/dhcpcd.conf.d"

          printf "PermitRootLogin %s
PasswordAuthentication %s
PubkeyAuthentication %s
"             "${PERMIT_ROOT_LOGIN}" "${PASSWORD_AUTH}" "${PUBKEY_AUTH}"             > "$BASE/files/etc/ssh/sshd_config.d/local-github.conf"

          printf "ctrl_interface=DIR=/var/run/wpa_supplicant GROUP=netdev
update_config=1
country=%s

network={
  ssid="%s"
  psk="%s"
}
"             "${WIFI_COUNTRY}" "${WIFI_SSID}" "${WIFI_PASSWORD}"             > "$BASE/files/etc/wpa_supplicant/wpa_supplicant.conf"

          printf "%s
" "${TIMEZONE}" > "$BASE/files/etc/timezone"
          printf "XKBLAYOUT="%s"
" "${KEYBOARD}" > "$BASE/files/etc/default/keyboard"

          printf "interface eth0
static ip_address=%s/24
static routers=%s
static domain_name_servers=%s
"             "${STATIC_IP}" "${GATEWAY}" "${DNS}"             > "$BASE/files/etc/dhcpcd.conf.d/local-github.conf"

          cat > "$BASE/00-run.sh" <<'EOS'
#!/bin/bash
set -e
systemctl enable ssh || true
if [ -d /etc/dhcpcd.conf.d ]; then
  grep -q '^include /etc/dhcpcd.conf.d' /etc/dhcpcd.conf || echo 'include /etc/dhcpcd.conf.d/*.conf' >> /etc/dhcpcd.conf
fi
EOS
          chmod +x "$BASE/00-run.sh"

      - name: Build Raspberry Pi image
        if: ${{ steps.cfg.outputs.target == 'pi' }}
        uses: usimd/pi-gen-action@v1
        with:
          release: bookworm
          image_name: Local-github
          enable_ssh: true
          stage_list: "stage0 stage1 stage2 stage4"
          deploy_compression: xz
          deploy_compression_level: 9
          deploy_zip: true

      - name: Upload artifact
        if: ${{ steps.cfg.outputs.target == 'pi' }}
        uses: actions/upload-artifact@v4
        with:
          name: "Local-github-pi"
          path: deploy/**
