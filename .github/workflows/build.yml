<<<<<<< HEAD
# (YAML from my previous assistant answer goes here)
=======
name: Build Local-github (paired creds)

on:
  workflow_dispatch:
    inputs:
      target:
        type: choice
        description: "Build target"
        options: [pi, pc, arm64, armhf, riscv64, i386, i860]
        default: pi
      bit_type:
        type: choice
        description: "CPU bitness"
        options: [64bit, 32bit]
        default: 64bit

      # ---------- COMBINED DROPDOWNS ----------
      user_creds:
        type: choice
        description: "Console username:password"
        options:
          - User:password
          - AirysDark:Zombie1986X2
          - chip:raspberry
        default: AirysDark:Zombie1986X2

      wifi_creds:
        type: choice
        description: "WI-FI SSID:password"
        options:
          - WI-FI SSID:password
          - Raspbain:Zombie1986X2
          - YourWiFi:YourPassword
        default: Raspbain:Zombie1986X2
      # ---------------------------------------

      hostname:
        description: "Hostname"
        default: local-github
      wifi_country:
        description: "Wi-Fi country (ISO 3166-1 alpha-2)"
        default: AU
      timezone:
        description: "Timezone (IANA tzdb, e.g., Australia/Sydney)"
        default: Australia/Sydney
      keyboard:
        description: "Keyboard layout (XKB, e.g., au or us)"
        default: au

      permit_root_login:
        type: choice
        description: "SSH: PermitRootLogin"
        options: [yes, prohibit-password, no]
        default: yes
      password_auth:
        type: choice
        description: "SSH: PasswordAuthentication"
        options: [yes, no]
        default: yes
      pubkey_auth:
        type: choice
        description: "SSH: PubkeyAuthentication"
        options: [yes, no]
        default: yes

jobs:
  build:
    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@v4

      - name: Compute architectures
        id: arch
        shell: bash
        run: |
          set -e
          BIT="${{ github.event.inputs.bit_type }}"
          PI="arm64"; PC="amd64"; GENERIC="arm64"
          if [ "$BIT" = "32bit" ]; then PI="armhf"; PC="i386"; GENERIC="i386"; fi
          echo "pi=$PI"         >> "$GITHUB_OUTPUT"
          echo "pc=$PC"         >> "$GITHUB_OUTPUT"
          echo "generic=$GENERIC" >> "$GITHUB_OUTPUT"
          echo "Resolved: pi=$PI pc=$PC generic=$GENERIC"

      - name: Parse paired credentials
        id: creds
        shell: bash
        run: |
          set -e
          # Split "name:secret" safely
          USER_PAIR='${{ github.event.inputs.user_creds }}'
          WIFI_PAIR='${{ github.event.inputs.wifi_creds }}'

          USERNAME="${USER_PAIR%%:*}"
          USERPASS="${USER_PAIR#*:}"

          WIFI_SSID="${WIFI_PAIR%%:*}"
          WIFI_PASSWORD="${WIFI_PAIR#*:}"

          echo "username=$USERNAME"          >> "$GITHUB_OUTPUT"
          echo "userpass=$USERPASS"          >> "$GITHUB_OUTPUT"
          echo "wifi_ssid=$WIFI_SSID"        >> "$GITHUB_OUTPUT"
          echo "wifi_password=$WIFI_PASSWORD" >> "$GITHUB_OUTPUT"

      - name: Prepare configs (placeholders OK)
        shell: bash
        env:
          HOSTNAME: ${{ github.event.inputs.hostname }}
          WIFI_COUNTRY: ${{ github.event.inputs.wifi_country }}
          TIMEZONE: ${{ github.event.inputs.timezone }}
          KEYBOARD: ${{ github.event.inputs.keyboard }}
          PERMIT_ROOT_LOGIN: ${{ github.event.inputs.permit_root_login }}
          PASSWORD_AUTH: ${{ github.event.inputs.password_auth }}
          PUBKEY_AUTH: ${{ github.event.inputs.pubkey_auth }}
          USERNAME: ${{ steps.creds.outputs.username }}
          USERPASS: ${{ steps.creds.outputs.userpass }}
          WIFI_SSID: ${{ steps.creds.outputs.wifi_ssid }}
          WIFI_PASSWORD: ${{ steps.creds.outputs.wifi_password }}
        run: |
          set -e
          echo "Using username=$USERNAME, timezone=$TIMEZONE, wifi_ssid=$WIFI_SSID"
          # Example staging (safe even if files/paths aren't present):
          mkdir -p targets/live-build/config/includes.chroot/tmp/payload || true
          rsync -a shared/ targets/live-build/config/includes.chroot/tmp/payload/ || true
          rsync -a shared/ targets/pi-gen/stage4/05-chip-base/files/ || true

          # Substitute placeholders if your repo uses them
          set +e
          grep -RIl "__HOSTNAME__\|__USERNAME__\|__USERPASS__\|__WIFI_SSID__\|__WIFI_PASSWORD__\|__WIFI_COUNTRY__\|__TIMEZONE__\|__KEYBOARD__\|__PERMIT_ROOT_LOGIN__\|__PASSWORD_AUTH__\|__PUBKEY_AUTH__" ./ \
            | xargs -r sed -i \
              -e "s/__HOSTNAME__/${HOSTNAME}/g" \
              -e "s/__USERNAME__/${USERNAME}/g" \
              -e "s/__USERPASS__/${USERPASS}/g" \
              -e "s/__WIFI_SSID__/${WIFI_SSID}/g" \
              -e "s/__WIFI_PASSWORD__/${WIFI_PASSWORD}/g" \
              -e "s/__WIFI_COUNTRY__/${WIFI_COUNTRY}/g" \
              -e "s#__TIMEZONE__#${TIMEZONE}#g" \
              -e "s/__KEYBOARD__/${KEYBOARD}/g" \
              -e "s/__PERMIT_ROOT_LOGIN__/${PERMIT_ROOT_LOGIN}/g" \
              -e "s/__PASSWORD_AUTH__/${PASSWORD_AUTH}/g" \
              -e "s/__PUBKEY_AUTH__/${PUBKEY_AUTH}/g"
          set -e

      # ----- Raspberry Pi image (pi-gen) -----
      - name: Build Raspberry Pi (pi-gen)
        if: ${{ github.event.inputs.target == 'pi' }}
        uses: usimd/pi-gen-action@v1
        with:
          release: bookworm
          image_name: Local-github
          enable_ssh: true
          stage_list: "stage0 stage1 stage2 stage4"
          deploy_compression: xz
          deploy_compression_level: 9
          deploy_zip: true
          # If the action supports arch input, uncomment:
          # architecture: ${{ steps.arch.outputs.pi }}

      - name: Upload Pi artifact
        if: ${{ github.event.inputs.target == 'pi' }}
        uses: actions/upload-artifact@v4
        with:
          name: Local-github-pi-${{ steps.arch.outputs.pi }}
          path: deploy/*

      # ----- PC ISO (Debian live-build) -----
      - name: Build PC ISO (live-build)
        if: ${{ github.event.inputs.target == 'pc' }}
        shell: bash
        run: |
          set -e
          sudo apt-get update
          sudo apt-get install -y live-build debootstrap syslinux isolinux
          cd targets/live-build
          lb config --architecture ${{ steps.arch.outputs.pc }} --distribution bookworm --mode debian \
            --binary-images iso-hybrid --debian-installer live --apt-recommends false
          sudo lb build

      - name: Upload PC artifact
        if: ${{ github.event.inputs.target == 'pc' }}
        uses: actions/upload-artifact@v4
        with:
          name: Local-github-pc-${{ steps.arch.outputs.pc }}
          path: targets/live-build/live-image-*.iso

      # ----- Generic rootfs images (placeholder) -----
      - name: Build generic image (arm64/armhf/riscv64/i386)
        if: ${{ contains(fromJSON('["arm64","armhf","riscv64","i386"]'), github.event.inputs.target) }}
        shell: bash
        run: |
          echo "Generic placeholder: target=${{ github.event.inputs.target }}, arch=${{ steps.arch.outputs.generic }}"
          # ./targets/generic/build-generic.sh "${{ github.event.inputs.target }}" bookworm "local-github-${{ github.event.inputs.target }}.img" 1024

      - name: i860 placeholder
        if: ${{ github.event.inputs.target == 'i860' }}
        run: echo "i860 placeholder"
>>>>>>> 41332a83bdb56f98c61e051fdca0f42a1fac77af
