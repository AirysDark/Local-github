name: Build Local-github (Pi Minimal Clean)

on:
  workflow_dispatch:
    inputs:
      target_bits:
        type: choice
        description: "Build target + bitness"
        options:
          - "pi 64bit"
          - "pi 32bit"
        default: "pi 64bit"

      user_creds:
        type: choice
        description: "Console username:password"
        options:
          - "User:password"
          - "AirysDark:Zombie1986X2"
          - "chip:raspberry"
        default: "AirysDark:Zombie1986X2"

      wifi_creds:
        type: choice
        description: "Wi-Fi SSID:password"
        options:
          - "WI-FI SSID:password"
          - "Raspbain:Zombie1986X2"
          - "YourWiFi:YourPassword"
        default: "Raspbain:Zombie1986X2"

      ssh_options:
        type: choice
        description: "SSH options (PermitRootLogin:PasswordAuth:PubkeyAuth)"
        options:
          - "true:true:true"
          - "prohibit-password:true:true"
          - "false:true:true"
          - "true:false:true"
          - "false:false:true"
          - "true:true:false"
        default: "true:true:true"

      net_ipv4:
        type: choice
        description: "Static IPv4:Gateway:DNS(semicolon-separated)"
        options:
          - "192.168.0.8:192.168.0.1:1.1.1.1;8.8.8.8"
          - "192.168.1.50:192.168.1.1:1.1.1.1;8.8.8.8"
          - "10.0.0.50:10.0.0.1:9.9.9.9;1.1.1.1"
        default: "192.168.0.8:192.168.0.1:1.1.1.1;8.8.8.8"

      wifi_country:
        description: "Wi-Fi country (ISO 3166-1 alpha-2)"
        default: "AU"

      timezone:
        description: "Timezone (IANA tzdb)"
        default: "Australia/Sydney"

      keyboard:
        description: "Keyboard layout (XKB)"
        default: "us"

jobs:
  build:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4

      - name: Parse target+bitness
        id: tgt
        shell: bash
        run: |
          set -e
          SEL='${{ github.event.inputs.target_bits }}'
          TARGET="${SEL% *}"
          BIT="${SEL##* }"
          echo "target=$TARGET" >> "$GITHUB_OUTPUT"
          echo "bit_type=$BIT"  >> "$GITHUB_OUTPUT"

      - name: Compute Pi arch
        id: arch
        shell: bash
        run: |
          set -e
          BIT='${{ steps.tgt.outputs.bit_type }}'
          PI="arm64"
          if [ "$BIT" = "32bit" ]; then PI="armhf"; fi
          echo "pi=$PI" >> "$GITHUB_OUTPUT"

      - name: Parse creds + network + SSH
        id: cfg
        shell: bash
        run: |
          set -e
          USER_PAIR='${{ github.event.inputs.user_creds }}'
          WIFI_PAIR='${{ github.event.inputs.wifi_creds }}'
          NET='${{ github.event.inputs.net_ipv4 }}'
          SSH='${{ github.event.inputs.ssh_options }}'

          USERNAME="${USER_PAIR%%:*}"; USERPASS="${USER_PAIR#*:}"
          WIFI_SSID="${WIFI_PAIR%%:*}"; WIFI_PASSWORD="${WIFI_PAIR#*:}"

          IP="${NET%%:*}"; REST="${NET#*:}"; GW="${REST%%:*}"; DNS="${REST#*:}"

          IFS=':' read -r R P K <<<"$SSH"
          case "$R" in true|yes|on) R="yes" ;; prohibit-password|prohibit_password|prohibit) R="prohibit-password" ;; false|no|off) R="no" ;; esac
          case "$P" in true|yes|on) P="yes" ;; false|no|off) P="no" ;; esac
          case "$K" in true|yes|on) K="yes" ;; false|no|off) K="no" ;; esac

          {
            echo "username=$USERNAME"
            echo "userpass=$USERPASS"
            echo "wifi_ssid=$WIFI_SSID"
            echo "wifi_password=$WIFI_PASSWORD"
            echo "static_ip=$IP"
            echo "gateway=$GW"
            echo "dns=$DNS"
            echo "permit_root_login=$R"
            echo "password_auth=$P"
            echo "pubkey_auth=$K"
          } >> "$GITHUB_OUTPUT"

      - name: Prepare overlays (Pi)
        if: ${{ steps.tgt.outputs.target == 'pi' }}
        shell: bash
        env:
          WIFI_COUNTRY:       ${{ github.event.inputs.wifi_country }}
          TIMEZONE:           ${{ github.event.inputs.timezone }}
          KEYBOARD:           ${{ github.event.inputs.keyboard }}
          USERNAME:           ${{ steps.cfg.outputs.username }}
          USERPASS:           ${{ steps.cfg.outputs.userpass }}
          WIFI_SSID:          ${{ steps.cfg.outputs.wifi_ssid }}
          WIFI_PASSWORD:      ${{ steps.cfg.outputs.wifi_password }}
          STATIC_IP:          ${{ steps.cfg.outputs.static_ip }}
          GATEWAY:            ${{ steps.cfg.outputs.gateway }}
          DNS:                ${{ steps.cfg.outputs.dns }}
          PERMIT_ROOT_LOGIN:  ${{ steps.cfg.outputs.permit_root_login }}
          PASSWORD_AUTH:      ${{ steps.cfg.outputs.password_auth }}
          PUBKEY_AUTH:        ${{ steps.cfg.outputs.pubkey_auth }}
        run: |
          set -e
          BASE="pi-gen/stage4/05-local-github"
          mkdir -p "$BASE/files/etc/ssh/sshd_config.d" "$BASE/files/etc/wpa_supplicant" "$BASE/files/etc/default" "$BASE/files/etc" "$BASE/files/etc/dhcpcd.conf.d"

          printf "PermitRootLogin %s\nPasswordAuthentication %s\nPubkeyAuthentication %s\n" \
            "${PERMIT_ROOT_LOGIN}" "${PASSWORD_AUTH}" "${PUBKEY_AUTH}" \
            > "$BASE/files/etc/ssh/sshd_config.d/local-github.conf"

          printf "ctrl_interface=DIR=/var/run/wpa_supplicant GROUP=netdev\nupdate_config=1\ncountry=%s\n\nnetwork={\n  ssid=\"%s\"\n  psk=\"%s\"\n}\n" \
            "${WIFI_COUNTRY}" "${WIFI_SSID}" "${WIFI_PASSWORD}" \
            > "$BASE/files/etc/wpa_supplicant/wpa_supplicant.conf"

          printf "%s\n" "${TIMEZONE}" > "$BASE/files/etc/timezone"
          printf "XKBLAYOUT=\"%s\"\n" "${KEYBOARD}" > "$BASE/files/etc/default/keyboard"

          printf "interface eth0\nstatic ip_address=%s/24\nstatic routers=%s\nstatic domain_name_servers=%s\n" \
            "${STATIC_IP}" "${GATEWAY}" "${DNS}" \
            > "$BASE/files/etc/dhcpcd.conf.d/local-github.conf"

          cat > "$BASE/00-run.sh" <<'EOS'
#!/bin/bash
set -e
systemctl enable ssh || true
if [ -d /etc/dhcpcd.conf.d ]; then
  grep -q '^include /etc/dhcpcd.conf.d' /etc/dhcpcd.conf || echo 'include /etc/dhcpcd.conf.d/*.conf' >> /etc/dhcpcd.conf
fi
EOS
          chmod +x "$BASE/00-run.sh"

      - name: Build Raspberry Pi image
        if: ${{ steps.tgt.outputs.target == 'pi' }}
        uses: usimd/pi-gen-action@v1
        with:
          release: bookworm
          image_name: Local-github
          enable_ssh: true
          stage_list: "stage0 stage1 stage2 stage4"
          deploy_compression: xz
          deploy_compression_level: 9
          deploy_zip: true

      - name: Upload artifact
        if: ${{ steps.tgt.outputs.target == 'pi' }}
        uses: actions/upload-artifact@v4
        with:
          name: "Local-github-pi"
          path: deploy/**
