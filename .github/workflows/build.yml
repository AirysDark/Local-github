name: Build Local-github (All-in-one, FIXED)

on:
  workflow_dispatch:
    inputs:
      target:
        type: choice
        description: "Build target"
        options:
          - pi
          - pc
          - arm64
          - armhf
          - riscv64
          - i386
          - i860
        default: pi
      bit_type:
        type: choice
        description: "CPU bitness / architecture family"
        options:
          - 64bit
          - 32bit
        default: 64bit
      hostname:
        description: "Hostname"
        default: local-github
      username:
        description: "Console username"
        default: chip
      user_password:
        description: "User password"
        default: raspberry
      root_password:
        description: "Root password"
        default: root
      wifi_ssid:
        description: "Wi-Fi SSID"
        default: YourWiFi
      wifi_password:
        description: "Wi-Fi password"
        default: YourPassword
      wifi_country:
        type: choice
        description: "Wi-Fi country code (ISO 3166-1 alpha-2) ? extend this list as needed"
        options:
          - AU
          - US
          - GB
          - NZ
          - CA
          - DE
          - FR
          - JP
          - CN
          - IN
          - BR
          - ES
          - IT
          - SG
          - ZA
        default: AU
      timezone:
        description: "Timezone (IANA tzdb, e.g., Australia/Sydney)"
        default: Australia/Sydney
      keyboard:
        type: choice
        description: "Keyboard layout (XKB) ? extend as needed"
        options:
          - au
          - us
          - gb
          - de
          - fr
          - es
          - it
          - jp
          - ru
          - br
          - us_intl
          - dvorak
          - colemak
          - custom
        default: au
      keyboard_custom:
        description: "If keyboard=custom, set layout here (e.g., us,intl)"
        default: us
      static_ip:
        description: "Static IPv4 (eth0)"
        default: 192.168.1.50
      gateway:
        description: "Gateway IPv4"
        default: 192.168.1.1
      dns:
        description: "DNS servers (semicolon-separated)"
        default: 1.1.1.1;8.8.8.8
      permit_root_login:
        type: choice
        description: "SSH: PermitRootLogin"
        options: [yes, prohibit-password, no]
        default: yes
      password_auth:
        type: choice
        description: "SSH: PasswordAuthentication"
        options: [yes, no]
        default: yes
      pubkey_auth:
        type: choice
        description: "SSH: PubkeyAuthentication"
        options: [yes, no]
        default: yes

jobs:
  build:
    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@v4

      # Resolve architectures from target + bit_type
      - name: Compute architectures
        id: arch
        shell: bash
        run: |
          set -e
          BIT="${{ github.event.inputs.bit_type }}"
          # Defaults assume 64-bit
          PI=arm64
          PC=amd64
          GENERIC=arm64
          if [ "$BIT" = "32bit" ]; then
            PI=armhf
            PC=i386
            GENERIC=i386
          fi
          echo "pi=$PI"       >> "$GITHUB_OUTPUT"
          echo "pc=$PC"       >> "$GITHUB_OUTPUT"
          echo "generic=$GENERIC" >> "$GITHUB_OUTPUT"
          echo "Resolved: pi=$PI pc=$PC generic=$GENERIC"

      # (Optional) Stage + substitute your templates here
      # Keep this block; it won't break validation even if your tree doesn't have these files yet.
      - name: Prepare configs from inputs
        shell: bash
        run: |
          set -e
          echo "Hostname: ${{ github.event.inputs.hostname }}"
          echo "Username: ${{ github.event.inputs.username }}"
          echo "Timezone: ${{ github.event.inputs.timezone }}"
          # Example: rsync templates then sed placeholders (safe to keep even if paths don't exist)
          mkdir -p targets/live-build/config/includes.chroot/tmp/payload || true
          rsync -a shared/ targets/live-build/config/includes.chroot/tmp/payload/ || true
          rsync -a shared/ targets/pi-gen/stage4/05-chip-base/files/ || true
          # Substitute placeholders only if files exist; ignore errors to keep workflow portable
          set +e
          grep -RIl "__HOSTNAME__\|__USERNAME__" ./ | xargs -r sed -i \
            -e "s/__HOSTNAME__/${{ github.event.inputs.hostname }}/g" \
            -e "s/__USERNAME__/${{ github.event.inputs.username }}/g" \
            -e "s/__USERPASS__/${{ github.event.inputs.user_password }}/g" \
            -e "s/__ROOTPASS__/${{ github.event.inputs.root_password }}/g" \
            -e "s/__WIFI_SSID__/${{ github.event.inputs.wifi_ssid }}/g" \
            -e "s/__WIFI_PASSWORD__/${{ github.event.inputs.wifi_password }}/g" \
            -e "s/__WIFI_COUNTRY__/${{ github.event.inputs.wifi_country }}/g" \
            -e "s#__TIMEZONE__#${{ github.event.inputs.timezone }}#g" \
            -e "s/__STATIC_IP__/${{ github.event.inputs.static_ip }}/g" \
            -e "s/__GATEWAY__/${{ github.event.inputs.gateway }}/g" \
            -e "s/__DNS__/${{ github.event.inputs.dns }}/g" \
            -e "s/__PERMIT_ROOT_LOGIN__/${{ github.event.inputs.permit_root_login }}/g" \
            -e "s/__PASSWORD_AUTH__/${{ github.event.inputs.password_auth }}/g" \
            -e "s/__PUBKEY_AUTH__/${{ github.event.inputs.pubkey_auth }}/g"
          set -e
          # Keyboard special-case
          KB="${{ github.event.inputs.keyboard }}"
          if [ "$KB" = "custom" ]; then KB="${{ github.event.inputs.keyboard_custom }}"; fi
          grep -RIl "__KEYBOARD__" ./ | xargs -r sed -i -e "s/__KEYBOARD__/${KB}/g"

      # ----- Raspberry Pi image (pi-gen) -----
      - name: Build Raspberry Pi (pi-gen)
        if: ${{ github.event.inputs.target == 'pi' }}
        uses: usimd/pi-gen-action@v1
        with:
          release: bookworm
          image_name: Local-github
          enable_ssh: true
          stage_list: "stage0 stage1 stage2 stage4"
          deploy_compression: xz
          deploy_compression_level: 9
          deploy_zip: true
          # If the action supports an arch input, uncomment & use:
          # architecture: ${{ steps.arch.outputs.pi }}

      - name: Upload Pi artifact
        if: ${{ github.event.inputs.target == 'pi' }}
        uses: actions/upload-artifact@v4
        with:
          name: Local-github-pi-${{ steps.arch.outputs.pi }}
          path: deploy/*

      # ----- PC ISO (Debian live-build) -----
      - name: Build PC ISO (live-build)
        if: ${{ github.event.inputs.target == 'pc' }}
        shell: bash
        run: |
          set -e
          sudo apt-get update
          sudo apt-get install -y live-build debootstrap syslinux isolinux
          cd targets/live-build
          lb config --architecture ${{ steps.arch.outputs.pc }} --distribution bookworm --mode debian \
            --binary-images iso-hybrid --debian-installer live --apt-recommends false
          sudo lb build

      - name: Upload PC artifact
        if: ${{ github.event.inputs.target == 'pc' }}
        uses: actions/upload-artifact@v4
        with:
          name: Local-github-pc-${{ steps.arch.outputs.pc }}
          path: targets/live-build/live-image-*.iso

      # ----- Generic rootfs images (placeholders) -----
      - name: Build generic image (arm64/armhf/riscv64/i386)
        if: ${{ contains(fromJSON('["arm64","armhf","riscv64","i386"]'), github.event.inputs.target) }}
        shell: bash
        run: |
          echo "Generic placeholder: target=${{ github.event.inputs.target }}, arch=${{ steps.arch.outputs.generic }}"
          # Call your debootstrap script here, e.g.:
          # ./targets/generic/build-generic.sh "${{ github.event.inputs.target }}" bookworm "local-github-${{ github.event.inputs.target }}.img" 1024

      - name: i860 placeholder
        if: ${{ github.event.inputs.target == 'i860' }}
        run: echo "i860 placeholder (bring your own toolchain)"
