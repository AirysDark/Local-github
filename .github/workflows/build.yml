name: Build Local-github (paired creds + SSH triple)

on:
  workflow_dispatch:
    inputs:
      target:
        type: choice
        description: "Build target"
        options: [pi, pc, arm64, armhf, riscv64, i386, i860]
        default: pi
      bit_type:
        type: choice
        description: "CPU bitness"
        options: [64bit, 32bit]
        default: 64bit

      # ====== COMBINED DROPDOWNS ======
      user_creds:
        type: choice
        description: "Console username:password"
        options:
          - User:password
          - AirysDark:Zombie1986X2
          - chip:raspberry
        default: AirysDark:Zombie1986X2

      wifi_creds:
        type: choice
        description: "WI-FI SSID:password"
        options:
          - WI-FI SSID:password
          - Raspbain:Zombie1986X2
          - YourWiFi:YourPassword
        default: Raspbain:Zombie1986X2

      ssh_options:
        type: choice
        description: "SSH options (PermitRootLogin:PasswordAuth:PubkeyAuth)"
        options:
          - true:true:true              # default: root allowed; passwords allowed; keys allowed
          - prohibit-password:true:true # root only by key
          - false:true:true             # no root, but passwords allowed for users
          - true:false:true             # keys-only auth
          - false:false:true            # most locked down: no root; no passwords; keys only
          - true:true:false             # allow passwords, but disable pubkeys (rare)
        default: true:true:true
      # =================================

      hostname:
        description: "Hostname"
        default: local-github
      wifi_country:
        description: "Wi-Fi country (ISO 3166-1 alpha-2)"
        default: AU
      timezone:
        description: "Timezone (IANA tzdb, e.g., Australia/Sydney)"
        default: Australia/Sydney
      keyboard:
        description: "Keyboard layout (XKB, e.g., au or us)"
        default: au
      static_ip:
        description: "Static IPv4 (eth0)"
        default: 192.168.1.50
      gateway:
        description: "Gateway IPv4"
        default: 192.168.1.1
      dns:
        description: "DNS servers (semicolon-separated)"
        default: 1.1.1.1;8.8.8.8

jobs:
  build:
    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@v4

      # Resolve architectures from target + bit_type
      - name: Compute architectures
        id: arch
        shell: bash
        run: |
          set -e
          BIT="${{ github.event.inputs.bit_type }}
          PI="arm64"; PC="amd64"; GENERIC="arm64"
          if [ "$BIT" = "32bit" ]; then PI="armhf"; PC="i386"; GENERIC="i386"; fi
          echo "pi=$PI"            >> "$GITHUB_OUTPUT"
          echo "pc=$PC"            >> "$GITHUB_OUTPUT"
          echo "generic=$GENERIC"  >> "$GITHUB_OUTPUT"
          echo "Resolved: pi=$PI pc=$PC generic=$GENERIC"

      - name: Parse paired credentials
        id: creds
        shell: bash
        run: |
          set -e
          USER_PAIR='${{ github.event.inputs.user_creds }}'
          WIFI_PAIR='${{ github.event.inputs.wifi_creds }}'

          USERNAME="${USER_PAIR%%:*}"
          USERPASS="${USER_PAIR#*:}"

          WIFI_SSID="${WIFI_PAIR%%:*}"
          WIFI_PASSWORD="${WIFI_PAIR#*:}"

          echo "username=$USERNAME"            >> "$GITHUB_OUTPUT"
          echo "userpass=$USERPASS"            >> "$GITHUB_OUTPUT"
          echo "wifi_ssid=$WIFI_SSID"          >> "$GITHUB_OUTPUT"
          echo "wifi_password=$WIFI_PASSWORD"  >> "$GITHUB_OUTPUT"

      - name: Parse SSH options (PermitRootLogin:PasswordAuth:PubkeyAuth)
        id: ssh
        shell: bash
        run: |
          set -e
          OPT='${{ github.event.inputs.ssh_options }}'
          IFS=':' read -r PERMIT_ROOT PASSAUTH PUBKEY <<<"$OPT"

          # Normalize to sshd accepted values
          case "$PERMIT_ROOT" in
            true|yes|on) PRL="yes" ;;
            prohibit-password|prohibit_password|prohibit) PRL="prohibit-password" ;;
            false|no|off) PRL="no" ;;
            *) PRL="$PERMIT_ROOT" ;;
          esac
          case "$PASSAUTH" in true|yes|on) PA="yes" ;; false|no|off) PA="no" ;; *) PA="$PASSAUTH" ;; esac
          case "$PUBKEY"   in true|yes|on) PK="yes" ;; false|no|off) PK="no" ;; *) PK="$PUBKEY"   ;; esac

          echo "permit_root_login=$PRL"  >> "$GITHUB_OUTPUT"
          echo "password_auth=$PA"       >> "$GITHUB_OUTPUT"
          echo "pubkey_auth=$PK"         >> "$GITHUB_OUTPUT"
          echo "Resolved SSH: PRL=$PRL, PasswordAuth=$PA, PubkeyAuth=$PK"

      - name: Prepare templates
        shell: bash
        env:
          HOSTNAME:           ${{ github.event.inputs.hostname }}
          WIFI_COUNTRY:       ${{ github.event.inputs.wifi_country }}
          TIMEZONE:           ${{ github.event.inputs.timezone }}
          KEYBOARD:           ${{ github.event.inputs.keyboard }}
          STATIC_IP:          ${{ github.event.inputs.static_ip }}
          GATEWAY:            ${{ github.event.inputs.gateway }}
          DNS:                ${{ github.event.inputs.dns }}
          PERMIT_ROOT_LOGIN:  ${{ steps.ssh.outputs.permit_root_login }}
          PASSWORD_AUTH:      ${{ steps.ssh.outputs.password_auth }}
          PUBKEY_AUTH:        ${{ steps.ssh.outputs.pubkey_auth }}
          USERNAME:           ${{ steps.creds.outputs.username }}
          USERPASS:           ${{ steps.creds.outputs.userpass }}
          WIFI_SSID:          ${{ steps.creds.outputs.wifi_ssid }}
          WIFI_PASSWORD:      ${{ steps.creds.outputs.wifi_password }}
        run: |
          set -e
          mkdir -p targets/live-build/config/includes.chroot/tmp/payload || true
          rsync -a shared/ targets/live-build/config/includes.chroot/tmp/payload/ || true
          rsync -a shared/ targets/pi-gen/stage4/05-chip-base/files/ || true

          set +e
          grep -RIl "__HOSTNAME__\|__USERNAME__\|__USERPASS__\|__WIFI_SSID__\|__WIFI_PASSWORD__\|__WIFI_COUNTRY__\|__TIMEZONE__\|__KEYBOARD__\|__STATIC_IP__\|__GATEWAY__\|__DNS__\|__PERMIT_ROOT_LOGIN__\|__PASSWORD_AUTH__\|__PUBKEY_AUTH__" ./             | xargs -r sed -i               -e "s/__HOSTNAME__/${HOSTNAME}/g"               -e "s/__USERNAME__/${USERNAME}/g"               -e "s/__USERPASS__/${USERPASS}/g"               -e "s/__WIFI_SSID__/${WIFI_SSID}/g"               -e "s/__WIFI_PASSWORD__/${WIFI_PASSWORD}/g"               -e "s/__WIFI_COUNTRY__/${WIFI_COUNTRY}/g"               -e "s#__TIMEZONE__#${TIMEZONE}#g"               -e "s/__KEYBOARD__/${KEYBOARD}/g"               -e "s/__STATIC_IP__/${STATIC_IP}/g"               -e "s/__GATEWAY__/${GATEWAY}/g"               -e "s/__DNS__/${DNS}/g"               -e "s/__PERMIT_ROOT_LOGIN__/${PERMIT_ROOT_LOGIN}/g"               -e "s/__PASSWORD_AUTH__/${PASSWORD_AUTH}/g"               -e "s/__PUBKEY_AUTH__/${PUBKEY_AUTH}/g"
          set -e

      # ----- Raspberry Pi image (pi-gen) -----
      - name: Build Raspberry Pi (pi-gen)
        if: ${{ github.event.inputs.target == 'pi' }}
        uses: usimd/pi-gen-action@v1
        with:
          release: bookworm
          image_name: Local-github
          enable_ssh: true
          stage_list: "stage0 stage1 stage2 stage4"
          deploy_compression: xz
          deploy_compression_level: 9
          deploy_zip: true
          # If the action supports arch input, uncomment:
          # architecture: ${{ steps.arch.outputs.pi }}

      - name: Upload Pi artifact
        if: ${{ github.event.inputs.target == 'pi' }}
        uses: actions/upload-artifact@v4
        with:
          name: Local-github-pi-${{ steps.arch.outputs.pi }}
          path: deploy/*

      # ----- PC ISO (Debian live-build) -----
      - name: Build PC ISO (live-build)
        if: ${{ github.event.inputs.target == 'pc' }}
        shell: bash
        run: |
          set -e
          sudo apt-get update
          sudo apt-get install -y live-build debootstrap syslinux isolinux
          cd targets/live-build
          lb config --architecture ${{ steps.arch.outputs.pc }} --distribution bookworm --mode debian             --binary-images iso-hybrid --debian-installer live --apt-recommends false
          sudo lb build

      - name: Upload PC artifact
        if: ${{ github.event.inputs.target == 'pc' }}
        uses: actions/upload-artifact@v4
        with:
          name: Local-github-pc-${{ steps.arch.outputs.pc }}
          path: targets/live-build/live-image-*.iso

      # ----- Generic rootfs images (placeholder) -----
      - name: Build generic image (arm64/armhf/riscv64/i386)
        if: ${{ contains(fromJSON('["arm64","armhf","riscv64","i386"]'), github.event.inputs.target) }}
        shell: bash
        run: |
          echo "Generic placeholder: target=${{ github.event.inputs.target }}, arch=${{ steps.arch.outputs.generic }}"
          # Example:
          # ./targets/generic/build-generic.sh "${{ github.event.inputs.target }}" bookworm "local-github-${{ github.event.inputs.target }}.img" 1024

      - name: i860 placeholder
        if: ${{ github.event.inputs.target == 'i860' }}
        run: echo "i860 placeholder"
